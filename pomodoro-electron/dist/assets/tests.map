{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","pomodoro-electron/tests/app.lint-test.js","pomodoro-electron/tests/ember-electron/main.js","pomodoro-electron/tests/helpers/destroy-app.js","pomodoro-electron/tests/helpers/module-for-acceptance.js","pomodoro-electron/tests/helpers/resolver.js","pomodoro-electron/tests/helpers/start-app.js","pomodoro-electron/tests/test-helper.js","pomodoro-electron/tests/tests.lint-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('pomodoro-electron/tests/app.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n});","define('pomodoro-electron/tests/ember-electron/main', ['exports'], function (exports) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  /* jshint node:true */\n\n  var _require = require('electron');\n\n  var app = _require.app;\n  var BrowserWindow = _require.BrowserWindow;\n  var protocol = _require.protocol;\n\n  var _require2 = require('path');\n\n  var dirname = _require2.dirname;\n  var resolve = _require2.resolve;\n\n  var url = require('url');\n  var protocolServe = require('electron-protocol-serve');\n\n  var mainWindow = null;\n\n  // The testUrl is a file: url pointing to our index.html, with some query\n  // params we need to preserve for testem. So we need to register our ember\n  // protocol accordingly.\n\n  var _process$argv = _slicedToArray(process.argv, 3);\n\n  var indexUrl = _process$argv[2];\n\n  var _url$parse = url.parse(indexUrl);\n\n  var indexPath = _url$parse.pathname;\n  var indexQuery = _url$parse.search;\n\n  var emberAppLocation = 'serve://dist' + indexQuery;\n\n  protocol.registerStandardSchemes(['serve'], { secure: true });\n  // The index.html is in the tests/ directory, so we want all other assets to\n  // load from its parent directory\n  protocolServe({\n    cwd: resolve(dirname(indexPath), '..'),\n    app: app,\n    protocol: protocol,\n    indexPath: indexPath\n  });\n\n  app.on('window-all-closed', function onWindowAllClosed() {\n    if (process.platform !== 'darwin') {\n      app.quit();\n    }\n  });\n\n  app.on('ready', function onReady() {\n    mainWindow = new BrowserWindow({\n      width: 800,\n      height: 600,\n      backgroundThrottling: false\n    });\n\n    delete mainWindow.module;\n\n    mainWindow.loadURL(emberAppLocation);\n\n    mainWindow.on('closed', function onClosed() {\n      mainWindow = null;\n    });\n  });\n});","define('pomodoro-electron/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('pomodoro-electron/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'pomodoro-electron/tests/helpers/start-app', 'pomodoro-electron/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _pomodoroElectronTestsHelpersStartApp, _pomodoroElectronTestsHelpersDestroyApp) {\n  var Promise = _ember['default'].RSVP.Promise;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _pomodoroElectronTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _pomodoroElectronTestsHelpersDestroyApp['default'])(_this.application);\n        });\n      }\n    });\n  };\n});","define('pomodoro-electron/tests/helpers/resolver', ['exports', 'pomodoro-electron/resolver', 'pomodoro-electron/config/environment'], function (exports, _pomodoroElectronResolver, _pomodoroElectronConfigEnvironment) {\n\n  var resolver = _pomodoroElectronResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _pomodoroElectronConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _pomodoroElectronConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('pomodoro-electron/tests/helpers/start-app', ['exports', 'ember', 'pomodoro-electron/app', 'pomodoro-electron/config/environment'], function (exports, _ember, _pomodoroElectronApp, _pomodoroElectronConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var attributes = _ember['default'].merge({}, _pomodoroElectronConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    return _ember['default'].run(function () {\n      var application = _pomodoroElectronApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('pomodoro-electron/tests/test-helper', ['exports', 'pomodoro-electron/tests/helpers/resolver', 'ember-qunit'], function (exports, _pomodoroElectronTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_pomodoroElectronTestsHelpersResolver['default']);\n});","define('pomodoro-electron/tests/tests.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('ember-electron/main.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'ember-electron/main.js should pass ESLint\\n\\n2:42 - \\'require\\' is not defined. (no-undef)\\n3:30 - \\'require\\' is not defined. (no-undef)\\n4:13 - \\'require\\' is not defined. (no-undef)\\n5:23 - \\'require\\' is not defined. (no-undef)\\n12:24 - \\'process\\' is not defined. (no-undef)\\n30:7 - \\'process\\' is not defined. (no-undef)');\n  });\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n});","require('pomodoro-electron/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClEA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjCA;AACA;","file":"tests.js"}