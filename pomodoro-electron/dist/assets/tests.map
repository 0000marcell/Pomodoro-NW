{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","pomodoro-electron/tests/app.lint-test.js","pomodoro-electron/tests/ember-electron/main.js","pomodoro-electron/tests/helpers/destroy-app.js","pomodoro-electron/tests/helpers/module-for-acceptance.js","pomodoro-electron/tests/helpers/resolver.js","pomodoro-electron/tests/helpers/start-app.js","pomodoro-electron/tests/integration/components/color-option-test.js","pomodoro-electron/tests/integration/components/dropdown-list-test.js","pomodoro-electron/tests/integration/components/flip-clock-test.js","pomodoro-electron/tests/integration/components/sidenav-list-test.js","pomodoro-electron/tests/integration/components/sidenav-panel-test.js","pomodoro-electron/tests/integration/components/tag-form-test.js","pomodoro-electron/tests/integration/components/task-form-test.js","pomodoro-electron/tests/integration/components/tasks-sidenav-test.js","pomodoro-electron/tests/test-helper.js","pomodoro-electron/tests/tests.lint-test.js","pomodoro-electron/tests/unit/controllers/application-test.js","pomodoro-electron/tests/unit/controllers/main-test.js","pomodoro-electron/tests/unit/controllers/testing-test.js","pomodoro-electron/tests/unit/helpers/pomodoro-hours-test.js","pomodoro-electron/tests/unit/routes/application-test.js","pomodoro-electron/tests/unit/routes/configuration-test.js","pomodoro-electron/tests/unit/routes/main-test.js","pomodoro-electron/tests/unit/routes/schedule-test.js","pomodoro-electron/tests/unit/routes/statistics-test.js","pomodoro-electron/tests/unit/routes/testing-test.js","pomodoro-electron/tests/unit/services/store-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('pomodoro-electron/tests/app.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/color-option.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/color-option.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/dropdown-list.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/dropdown-list.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/flip-clock.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/flip-clock.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/sidenav-list.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/sidenav-list.js should pass ESLint\\n\\n22:9 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('components/sidenav-panel.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/sidenav-panel.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/tag-form.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/tag-form.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/task-form.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/task-form.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/tasks-sidenav.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/tasks-sidenav.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/main.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/main.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/testing.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/testing.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/pomodoro-hours.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/pomodoro-hours.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/application.js should pass ESLint\\n\\n22:16 - \\'task\\' is defined but never used. (no-unused-vars)\\n28:15 - \\'tag\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('routes/configuration.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/configuration.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/data.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/data.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/main.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/main.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/schedule.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/schedule.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/statistics.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/statistics.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/testing.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/testing.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('services/store.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'services/store.js should pass ESLint\\n\\n5:45 - \\'reject\\' is defined but never used. (no-unused-vars)\\n7:7 - Unexpected console statement. (no-console)');\n  });\n});","define('pomodoro-electron/tests/ember-electron/main', ['exports'], function (exports) {\n  var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();\n\n  /*eslint no-undef: \"error\"*/\n  /*global require:true process:true*/\n\n  var _require = require('electron');\n\n  var app = _require.app;\n  var BrowserWindow = _require.BrowserWindow;\n  var protocol = _require.protocol;\n\n  var _require2 = require('path');\n\n  var dirname = _require2.dirname;\n  var resolve = _require2.resolve;\n\n  var url = require('url');\n  var protocolServe = require('electron-protocol-serve');\n\n  var mainWindow = null;\n\n  // The testUrl is a file: url pointing to our index.html, with some query\n  // params we need to preserve for testem. So we need to register our ember\n  // protocol accordingly.\n\n  var _process$argv = _slicedToArray(process.argv, 3);\n\n  var indexUrl = _process$argv[2];\n\n  var _url$parse = url.parse(indexUrl);\n\n  var indexPath = _url$parse.pathname;\n  var indexQuery = _url$parse.search;\n\n  var emberAppLocation = 'serve://dist' + indexQuery;\n\n  protocol.registerStandardSchemes(['serve'], { secure: true });\n  // The index.html is in the tests/ directory, so we want all other assets to\n  // load from its parent directory\n  protocolServe({\n    cwd: resolve(dirname(indexPath), '..'),\n    app: app,\n    protocol: protocol,\n    indexPath: indexPath\n  });\n\n  app.on('window-all-closed', function onWindowAllClosed() {\n    if (process.platform !== 'darwin') {\n      app.quit();\n    }\n  });\n\n  app.on('ready', function onReady() {\n    mainWindow = new BrowserWindow({\n      width: 800,\n      height: 600,\n      backgroundThrottling: false\n    });\n\n    delete mainWindow.module;\n\n    mainWindow.loadURL(emberAppLocation);\n\n    mainWindow.on('closed', function onClosed() {\n      mainWindow = null;\n    });\n  });\n});","define('pomodoro-electron/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  exports['default'] = destroyApp;\n\n  function destroyApp(application) {\n    _ember['default'].run(application, 'destroy');\n  }\n});","define('pomodoro-electron/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'ember', 'pomodoro-electron/tests/helpers/start-app', 'pomodoro-electron/tests/helpers/destroy-app'], function (exports, _qunit, _ember, _pomodoroElectronTestsHelpersStartApp, _pomodoroElectronTestsHelpersDestroyApp) {\n  var Promise = _ember['default'].RSVP.Promise;\n\n  exports['default'] = function (name) {\n    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _pomodoroElectronTestsHelpersStartApp['default'])();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _pomodoroElectronTestsHelpersDestroyApp['default'])(_this.application);\n        });\n      }\n    });\n  };\n});","define('pomodoro-electron/tests/helpers/resolver', ['exports', 'pomodoro-electron/resolver', 'pomodoro-electron/config/environment'], function (exports, _pomodoroElectronResolver, _pomodoroElectronConfigEnvironment) {\n\n  var resolver = _pomodoroElectronResolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: _pomodoroElectronConfigEnvironment['default'].modulePrefix,\n    podModulePrefix: _pomodoroElectronConfigEnvironment['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n});","define('pomodoro-electron/tests/helpers/start-app', ['exports', 'ember', 'pomodoro-electron/app', 'pomodoro-electron/config/environment'], function (exports, _ember, _pomodoroElectronApp, _pomodoroElectronConfigEnvironment) {\n  exports['default'] = startApp;\n\n  function startApp(attrs) {\n    var attributes = _ember['default'].merge({}, _pomodoroElectronConfigEnvironment['default'].APP);\n    attributes = _ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    return _ember['default'].run(function () {\n      var application = _pomodoroElectronApp['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('pomodoro-electron/tests/integration/components/color-option-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('color-option', 'Integration | Component | color option', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('#color-option-01 it show a clock with the color passed', function (assert) {\n\n    this.set('color', { id: 1, value: '#ff00ff' });\n    this.render(Ember.HTMLBars.template({\n      'id': 'rXLjRxAw',\n      'block': '{\"statements\":[[\"append\",[\"helper\",[\"color-option\"],null,[[\"color\"],[[\"get\",[\"color\"]]]]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n    var result = this.$('#co-test-block').css('background-color');\n    assert.equal(result, 'rgb(255, 0, 255)');\n  });\n});","define('pomodoro-electron/tests/integration/components/dropdown-list-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('dropdown-list', 'Integration | Component | dropdown list', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('#dropdown-list-01 shows a list of items', function (assert) {\n    this.set('items', [{ id: 1, name: 'pink', value: '#ff00ff' }, { id: 2, name: 'red', value: '#ff0000' }]);\n    this.render(Ember.HTMLBars.template({\n      'id': 'uNa+bywi',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"dropdown-list\"],null,[[\"items\"],[[\"get\",[\"items\"]]]],0]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"append\",[\"unknown\",[\"item\",\"name\"]],false],[\"close-element\"],[\"text\",\"\\\\n\"]],\"locals\":[\"color\"]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n    assert.equal(this.$('#dl-test-list li').length, 1);\n  });\n});","define('pomodoro-electron/tests/integration/components/flip-clock-test', ['exports', 'ember-qunit', 'ember-test-helpers/wait', 'ember'], function (exports, _emberQunit, _emberTestHelpersWait, _ember) {\n\n  (0, _emberQunit.moduleForComponent)('flip-clock', 'Integration | Component | flip clock', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('#flip-clock-01 it renders a clock', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n    var clock = { state: 'paused', mode: 'pomodoro' };\n    this.set('clock', clock);\n    this.render(_ember['default'].HTMLBars.template({\n      'id': 'qd51EArQ',\n      'block': '{\"statements\":[[\"append\",[\"helper\",[\"flip-clock\"],null,[[\"clock\"],[[\"get\",[\"clock\"]]]]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n    assert.equal(this.$('.flip-clock').length, 1);\n  });\n\n  (0, _emberQunit.test)('#flip-clock-02 it shows the correct time', function (assert) {\n    var clock = {\n      state: 'paused',\n      mode: 'pomodoro',\n      time: 15\n    };\n    this.set('clock', clock);\n    this.set('flipClock', null);\n    this.render(_ember['default'].HTMLBars.template({\n      'id': 'HNuUO9Hw',\n      'block': '{\"statements\":[[\"append\",[\"helper\",[\"flip-clock\"],null,[[\"flipClock\",\"clock\"],[[\"get\",[\"flipClock\"]],[\"get\",[\"clock\"]]]]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n    assert.equal(this.get('flipClock').getTime().time, 14);\n  });\n\n  (0, _emberQunit.test)('#flip-clock-03 it starts the clock', function (assert) {\n    var _this = this;\n\n    var clock = {\n      state: 'paused',\n      mode: 'pomodoro',\n      time: 5\n    };\n    this.set('clock', clock);\n    this.set('flipClock', null);\n    this.render(_ember['default'].HTMLBars.template({\n      'id': 'HNuUO9Hw',\n      'block': '{\"statements\":[[\"append\",[\"helper\",[\"flip-clock\"],null,[[\"flipClock\",\"clock\"],[[\"get\",[\"flipClock\"]],[\"get\",[\"clock\"]]]]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n    this.$('#fc-test-startbtn').click();\n    _ember['default'].run(this, function () {\n      assert.equal(_this.get('flipClock').getTime().time, 3);\n    });\n  });\n\n  (0, _emberQunit.test)('#flip-clock-04 it stops the clock', function (assert) {\n    var _this2 = this;\n\n    var clock = {\n      state: 'paused',\n      mode: 'pomodoro',\n      time: 5\n    };\n    this.set('clock', clock);\n    this.render(_ember['default'].HTMLBars.template({\n      'id': 'qd51EArQ',\n      'block': '{\"statements\":[[\"append\",[\"helper\",[\"flip-clock\"],null,[[\"clock\"],[[\"get\",[\"clock\"]]]]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n    this.$('#fc-test-startbtn').click();\n    _ember['default'].run(this, function () {\n      _this2.$('#fc-test-startbtn').click();\n      _ember['default'].run(_this2, function () {\n        assert.equal(_this2.get('clock.state'), 'paused');\n      });\n    });\n  });\n\n  (0, _emberQunit.test)('#flip-clock-05 goes to interval mode', function (assert) {\n    var _this3 = this;\n\n    var clock = {\n      state: 'paused',\n      mode: 'pomodoro',\n      time: 2,\n      shortInterval: 5\n    };\n    this.set('clock', clock);\n    this.render(_ember['default'].HTMLBars.template({\n      'id': 'qd51EArQ',\n      'block': '{\"statements\":[[\"append\",[\"helper\",[\"flip-clock\"],null,[[\"clock\"],[[\"get\",[\"clock\"]]]]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n    this.$('#fc-test-startbtn').click();\n    return new _ember['default'].RSVP.Promise(function (resolve, reject) {\n      var wait = setInterval(function () {\n        assert.equal(_this3.get('clock.mode'), 'interval');\n        _this3.$('#fc-test-startbtn').click();\n        clearInterval(wait);\n        resolve();\n      }, 3000);\n    });\n  });\n\n  (0, _emberQunit.test)('#flip-clock-06 comes out of interval mode', function (assert) {\n    var _this4 = this;\n\n    var clock = {\n      state: 'paused',\n      mode: 'pomodoro',\n      time: 2,\n      shortInterval: 2\n    };\n    this.set('clock', clock);\n    this.render(_ember['default'].HTMLBars.template({\n      'id': 'qd51EArQ',\n      'block': '{\"statements\":[[\"append\",[\"helper\",[\"flip-clock\"],null,[[\"clock\"],[[\"get\",[\"clock\"]]]]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n    this.$('#fc-test-startbtn').click();\n    return new _ember['default'].RSVP.Promise(function (resolve) {\n      var wait = setInterval(function () {\n        assert.equal(_this4.get('clock.mode'), 'interval');\n        _this4.$('#fc-test-startbtn').click();\n        clearInterval(wait);\n        resolve();\n      }, 4000);\n    });\n  });\n});","define('pomodoro-electron/tests/integration/components/sidenav-list-test', ['exports', 'ember', 'ember-qunit'], function (exports, _ember, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('sidenav-list', 'Integration | Component | sidenav list', {\n    integration: true\n  });\n\n  var baseObj = {\n    storage: {\n      tasks: [{ id: 1, name: 'task 1',\n        description: 'description 1', pomodoros: [] }, { id: 2, name: 'task 2', description: 'description 2',\n        pomodoros: [] }],\n      tags: [{ id: 1, name: 'work',\n        description: 'work!', color: '#ff00ff' }, { id: 2, name: 'learning', description: 'learning!',\n        color: '#fff00' }] }\n  };\n\n  (0, _emberQunit.test)('#sidenav-list-01 shows a list of tasks', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n    var data = JSON.parse(JSON.stringify(baseObj));\n    this.set('model', data);\n    this.set('listMode', 'tasks');\n    this.render(_ember['default'].HTMLBars.template({\n      'id': '+M9AoxUG',\n      'block': '{\"statements\":[[\"append\",[\"helper\",[\"sidenav-list\"],null,[[\"listMode\",\"model\"],[[\"get\",[\"listMode\"]],[\"get\",[\"model\"]]]]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n    assert.equal(this.$('li').length, 2);\n  });\n\n  (0, _emberQunit.test)('#sidenav-list-02 shows a list of tags', function (assert) {\n    var data = JSON.parse(JSON.stringify(baseObj));\n    this.set('model', data);\n    this.set('listMode', 'tags');\n    this.render(_ember['default'].HTMLBars.template({\n      'id': '+M9AoxUG',\n      'block': '{\"statements\":[[\"append\",[\"helper\",[\"sidenav-list\"],null,[[\"listMode\",\"model\"],[[\"get\",[\"listMode\"]],[\"get\",[\"model\"]]]]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n    assert.equal(this.$('li').length, 2);\n  });\n\n  (0, _emberQunit.test)('#sidenav-list-03 searchs the list', function (assert) {\n    var _this = this;\n\n    var data = JSON.parse(JSON.stringify(baseObj));\n    this.set('model', data);\n    this.set('listMode', 'tags');\n    this.render(_ember['default'].HTMLBars.template({\n      'id': '+M9AoxUG',\n      'block': '{\"statements\":[[\"append\",[\"helper\",[\"sidenav-list\"],null,[[\"listMode\",\"model\"],[[\"get\",[\"listMode\"]],[\"get\",[\"model\"]]]]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n    this.$('#sl-test-search').val('learning');\n    this.$('#sl-test-search').trigger('keyup');\n    return new _ember['default'].RSVP.Promise(function (resolve) {\n      var wait = setInterval(function () {\n        assert.equal(_this.$('li').length, 1);\n        clearInterval(wait);\n        resolve();\n      }, 700);\n    });\n  });\n});","define('pomodoro-electron/tests/integration/components/sidenav-panel-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('sidenav-panel', 'Integration | Component | sidenav panel', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('#sidenav-panel-01 it opens the panel', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n    this.set('openSidenav', true);\n    this.render(Ember.HTMLBars.template({\n      'id': 'Fp/c9YpB',\n      'block': '{\"statements\":[[\"append\",[\"helper\",[\"sidenav-panel\"],null,[[\"openSidenav\"],[[\"get\",[\"openSidenav\"]]]]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n    assert.equal(this.$('.open-sidenav').length, 1);\n  });\n\n  (0, _emberQunit.test)('#sidenav-panel-02 opens left panel', function (assert) {\n    this.set('leftPanel', true);\n    this.render(Ember.HTMLBars.template({\n      'id': 'uq4wkitt',\n      'block': '{\"statements\":[[\"append\",[\"helper\",[\"sidenav-panel\"],null,[[\"leftPanel\"],[[\"get\",[\"leftPanel\"]]]]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n    assert.equal(this.$('.left-panel').length, 1);\n  });\n\n  (0, _emberQunit.test)('#sidenav-panel-03 closes the panel on overlay click', function (assert) {\n    this.set('leftPanel', true);\n    this.set('openSidenav', true);\n    this.render(Ember.HTMLBars.template({\n      'id': 'BXAEXEd+',\n      'block': '{\"statements\":[[\"append\",[\"helper\",[\"sidenav-panel\"],null,[[\"leftPanel\",\"openSidenav\"],[[\"get\",[\"leftPanel\"]],[\"get\",[\"openSidenav\"]]]]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n    this.$('#sp-test-overlaybtn').click();\n    assert.equal(this.$('.open-sidenav').length, 0);\n    assert.equal(this.$('.left-panel').length, 0);\n  });\n});","define('pomodoro-electron/tests/integration/components/tag-form-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('tag-form', 'Integration | Component | tag form', {\n    integration: true\n  });\n\n  var baseTag = { name: 'work', description: 'work',\n    color: '#ff00ff' };\n\n  var baseModel = { tasks: [], tags: [{ id: 1, name: 'learning',\n      description: 'learning', color: '#fff000' }] };\n\n  (0, _emberQunit.test)('#tag-form-01 it creates a tag, shows a msg', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n    this.set('tag', JSON.parse(JSON.stringify(baseTag)));\n    this.set('saveTag', function (newTag) {\n      assert.deepEqual(newTag, baseTag);\n      return new Ember.RSVP.Promise(function (resolve, reject) {\n        if (newTag.name && newTag.description && newTag.color) {\n          resolve();\n        } else {\n          reject();\n        }\n      });\n    });\n    this.render(Ember.HTMLBars.template({\n      'id': 'vr64Xwm8',\n      'block': '{\"statements\":[[\"append\",[\"helper\",[\"tag-form\"],null,[[\"saveTag\",\"tag\"],[[\"get\",[\"saveTag\"]],[\"get\",[\"tag\"]]]]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n    this.$('#tf-test-saveButton').click();\n    assert.equal(this.$('#tf-test-msgs').text().trim(), 'tag saved!');\n  });\n\n  (0, _emberQunit.test)('#tag-form-02 it shows an error msg', function (assert) {\n    this.set('tag', { name: '', description: '' });\n    this.set('saveTag', function (newTag) {\n      return new Ember.RSVP.Promise(function (resolve, reject) {\n        if (newTag.name && newTag.description && newTag.color) {\n          resolve();\n        } else {\n          reject();\n        }\n      });\n    });\n    this.render(Ember.HTMLBars.template({\n      'id': 'vr64Xwm8',\n      'block': '{\"statements\":[[\"append\",[\"helper\",[\"tag-form\"],null,[[\"saveTag\",\"tag\"],[[\"get\",[\"saveTag\"]],[\"get\",[\"tag\"]]]]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n    this.$('#tf-test-saveButton').click();\n    assert.equal(this.$('#tf-test-msgs').text().trim(), 'an error occored!');\n  });\n\n  (0, _emberQunit.test)('#tag-form-03 shows a list of colors passed', function (assert) {\n    this.set('colors', [{ id: 1, name: 'pink', value: '#ff00ff' }, { id: 2, name: 'red', value: '#ff0000' }]);\n    this.render(Ember.HTMLBars.template({\n      'id': 'PUMTD9g3',\n      'block': '{\"statements\":[[\"append\",[\"helper\",[\"tag-form\"],null,[[\"colors\"],[[\"get\",[\"colors\"]]]]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n    assert.equal(this.$('#tf-test-colorList option').length, 2);\n  });\n});","define('pomodoro-electron/tests/integration/components/task-form-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('task-form', 'Integration | Component | task form', {\n    integration: true\n  });\n\n  var baseModel = { tasks: [{ id: 1, name: 'Task 1',\n      description: 'Task 2', pomodoros: [] }, { id: 2,\n      name: 'Task 2', description: 'Task 2', pomodoros: [] }],\n    tags: [{ id: 1, name: 'learning',\n      description: 'learning', color: '#fff000' }, { id: 2, name: 'work', description: 'work', color: '#ff00ff' }] };\n\n  (0, _emberQunit.test)('#task-form-01 it shows task form with a select of tags', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n    this.set('model', JSON.parse(JSON.stringify(baseModel)));\n    this.render(Ember.HTMLBars.template({\n      'id': 'mS7Gmtsz',\n      'block': '{\"statements\":[[\"append\",[\"helper\",[\"task-form\"],null,[[\"tags\"],[[\"get\",[\"model\",\"tags\"]]]]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n    assert.equal(this.$('#taf-test-tagsList option').length, 2);\n  });\n\n  (0, _emberQunit.test)('#task-form-02 it create a task shows a msg', function (assert) {\n    this.set('newTask', { name: 'Task 2',\n      description: 'Task 2', pomodoros: [] });\n    this.set('saveAction', function (newTask) {\n      return new Ember.RSVP.Promise(function (resolve, reject) {\n        if (newTask.name && newTask.description) {\n          resolve();\n        } else {\n          reject();\n        }\n      });\n    });\n    this.render(Ember.HTMLBars.template({\n      'id': '6HzgALiC',\n      'block': '{\"statements\":[[\"append\",[\"helper\",[\"task-form\"],null,[[\"task\",\"saveTask\"],[[\"get\",[\"newTask\"]],[\"get\",[\"saveAction\"]]]]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n    this.$('#taf-test-saveButton').click();\n    assert.equal(this.$('#taf-test-msgs li').length, 1);\n  });\n\n  (0, _emberQunit.test)('#task-form-03 dont create a task show error msg', function (assert) {\n    this.set('newTask', { name: 'Task 3',\n      description: null, pomodoros: [] });\n    this.set('saveAction', function (newTask) {\n      return new Ember.RSVP.Promise(function (resolve, reject) {\n        if (newTask.name && newTask.description) {\n          resolve();\n        } else {\n          reject();\n        }\n      });\n    });\n    this.render(Ember.HTMLBars.template({\n      'id': '6HzgALiC',\n      'block': '{\"statements\":[[\"append\",[\"helper\",[\"task-form\"],null,[[\"task\",\"saveTask\"],[[\"get\",[\"newTask\"]],[\"get\",[\"saveAction\"]]]]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n    this.$('#taf-test-saveButton').click();\n    assert.equal(this.$('#taf-test-msgs li').length, 1);\n  });\n});","define('pomodoro-electron/tests/integration/components/tasks-sidenav-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleForComponent)('tasks-sidenav', 'Integration | Component | tasks sidenav', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      'id': '2dOA0Zof',\n      'block': '{\"statements\":[[\"append\",[\"unknown\",[\"tasks-sidenav\"]],false]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      'id': 'myIT/3sY',\n      'block': '{\"statements\":[[\"text\",\"\\\\n\"],[\"block\",[\"tasks-sidenav\"],null,null,0],[\"text\",\"  \"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"      template block text\\\\n\"]],\"locals\":[]}],\"hasPartials\":false}',\n      'meta': {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('pomodoro-electron/tests/test-helper', ['exports', 'pomodoro-electron/tests/helpers/resolver', 'ember-qunit'], function (exports, _pomodoroElectronTestsHelpersResolver, _emberQunit) {\n\n  (0, _emberQunit.setResolver)(_pomodoroElectronTestsHelpersResolver['default']);\n});","define('pomodoro-electron/tests/tests.lint-test', ['exports'], function (exports) {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('ember-electron/main.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'ember-electron/main.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/color-option-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/color-option-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/dropdown-list-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/dropdown-list-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/flip-clock-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'integration/components/flip-clock-test.js should pass ESLint\\n\\n3:8 - \\'wait\\' is defined but never used. (no-unused-vars)\\n84:43 - \\'reject\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('integration/components/sidenav-list-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/sidenav-list-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/sidenav-panel-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/sidenav-panel-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/tag-form-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'integration/components/tag-form-test.js should pass ESLint\\n\\n12:7 - \\'baseModel\\' is assigned a value but never used. (no-unused-vars)\\n23:16 - \\'Ember\\' is not defined. (no-undef)\\n41:16 - \\'Ember\\' is not defined. (no-undef)');\n  });\n\n  QUnit.test('integration/components/task-form-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'integration/components/task-form-test.js should pass ESLint\\n\\n31:16 - \\'Ember\\' is not defined. (no-undef)\\n51:16 - \\'Ember\\' is not defined. (no-undef)');\n  });\n\n  QUnit.test('integration/components/tasks-sidenav-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/tasks-sidenav-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/main-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/main-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/testing-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/testing-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/helpers/pomodoro-hours-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/pomodoro-hours-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/configuration-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/configuration-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/main-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/main-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/schedule-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/schedule-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/statistics-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/statistics-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/testing-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/testing-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/store-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/store-test.js should pass ESLint\\n\\n');\n  });\n});","define('pomodoro-electron/tests/unit/controllers/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:application', 'Unit | Controller | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('pomodoro-electron/tests/unit/controllers/main-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:main', 'Unit | Controller | main', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('pomodoro-electron/tests/unit/controllers/testing-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('controller:testing', 'Unit | Controller | testing', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('pomodoro-electron/tests/unit/helpers/pomodoro-hours-test', ['exports', 'pomodoro-electron/helpers/pomodoro-hours', 'qunit'], function (exports, _pomodoroElectronHelpersPomodoroHours, _qunit) {\n\n  (0, _qunit.module)('Unit | Helper | pomodoro hours');\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _pomodoroElectronHelpersPomodoroHours.pomodoroHours)([42]);\n    assert.ok(result);\n  });\n});","define('pomodoro-electron/tests/unit/routes/application-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:application', 'Unit | Route | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('pomodoro-electron/tests/unit/routes/configuration-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:configuration', 'Unit | Route | configuration', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('pomodoro-electron/tests/unit/routes/main-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:main', 'Unit | Route | main', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('pomodoro-electron/tests/unit/routes/schedule-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:schedule', 'Unit | Route | schedule', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('pomodoro-electron/tests/unit/routes/statistics-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:statistics', 'Unit | Route | statistics', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('pomodoro-electron/tests/unit/routes/testing-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('route:testing', 'Unit | Route | testing', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('pomodoro-electron/tests/unit/services/store-test', ['exports', 'ember-qunit'], function (exports, _emberQunit) {\n\n  (0, _emberQunit.moduleFor)('service:store', 'Unit | Service | store', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","require('pomodoro-electron/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappingstHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnEA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdlxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjhIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;","file":"tests.js"}